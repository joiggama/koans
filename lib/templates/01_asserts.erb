class <%= I18n.t("class_prefix") + I18n.t("tests.asserts.class") %> < Neo::Koan

  # <%= I18n.t("tests.asserts.assert_truth.description") %>.
  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.asserts.assert_truth.name") %>
    #--
    assert true                 # <%= I18n.t("tests.asserts.assert_truth.hint") %>
    if false
    #++
    assert false                # <%= I18n.t("tests.asserts.assert_truth.hint") %>
    #--
    end
    #++
  end

  # <%= I18n.t("tests.asserts.assert_with_message.description") %>.
  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.asserts.assert_with_message.name") %>
    #--
    assert true, "<%= I18n.t('tests.asserts.assert_with_message.hint') %>"
    if false
    #++
    assert false, "<%= I18n.t('tests.asserts.assert_with_message.hint') %>"
    #--
    end
    #++
  end

  # <%= I18n.t("tests.asserts.assert_equality.description") %>.
  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.asserts.assert_equality.name") %>
    <%- expected_value = I18n.t("tests.asserts.assert_equality.expected_value") -%>
    <%= expected_value %> = __(2)
    <%- actual_value = I18n.t("tests.asserts.assert_equality.actual_value") -%>
    <%= actual_value %> = 1 + 1

    assert <%= expected_value %> == <%= actual_value %>
  end

  # <%= I18n.t("tests.asserts.a_better_way_of_asserting_equality.description") %>.
  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.asserts.a_better_way_of_asserting_equality.name") %>
    <%- expected_value = I18n.t("tests.asserts.assert_equality.expected_value") -%>
    <%= expected_value %> = __(2)
    <%- actual_value = I18n.t("tests.asserts.assert_equality.actual_value") -%>
    <%= actual_value %> = 1 + 1

    assert_equal <%= expected_value %>, <%= actual_value %>
  end

  # <%= I18n.t "tests.asserts.fill_in_values.description" %>.
  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.asserts.fill_in_values.name") %>
    assert_equal __(2), 1 + 1
  end

end

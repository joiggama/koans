require "koans/neo"

class <%= I18n.t("class_prefix") + I18n.t("tests.arrays.class") %> < Neo::Koan

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.creating_arrays.name") %>
    <%- empty_array = I18n.t("tests.arrays.creating_arrays.empty_array") -%>
    <%= empty_array %> = Array.new
    assert_equal __(Array), <%= empty_array %>.class
    assert_equal __(0), <%= empty_array %>.size
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.array_literals.name") %>
    <%- array = I18n.t("tests.arrays.array_literals.array") -%>
    <%= array %> = Array.new
    assert_equal [], <%= array %> # __

    <%= array %>[0] = 1
    assert_equal [1], <%= array %>     # __

    <%= array %>[1] = 2
    assert_equal [1, __(2)], <%= array %>

    <%= array %> << 333
    assert_equal __([1, 2, 333]), <%= array %>
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.accessing_array_elements.name")%>
    <%- array = I18n.t("tests.arrays.accessing_array_elements.array") -%>
    <%- elements = I18n.t("tests.arrays.accessing_array_elements.elements") -%>
    <%= array %> = <%= elements %>
    <%- peanut, butter, _, jelly = *elements -%>

    assert_equal __(<%= peanut %>), <%= array %>[0]
    assert_equal __(<%= peanut %>), <%= array %>.first
    assert_equal __(<%= jelly %>), <%= array %>[3]
    assert_equal __(<%= jelly %>), <%= array %>.last
    assert_equal __(<%= jelly %>), <%= array %>[-1]
    assert_equal __(<%= butter %>), <%= array %>[-3]
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.slicing_arrays.name") %>
    <%- array = I18n.t("tests.arrays.slicing_arrays.array") -%>
    <%- elements = I18n.t("tests.arrays.slicing_arrays.elements") -%>
    <%= array %> = <%= elements %>
    <%- peanut, butter, _and, jelly = *elements -%>

    assert_equal __([<%= peanut %>]), <%= array %>[0, 1]
    assert_equal __([<%= peanut %>, <%= butter %>]), <%= array %>[0, 2]
    assert_equal __([<%= _and %>, <%= jelly %>]), <%= array %>[2, 2]
    assert_equal __([<%= _and %>, <%= jelly %>]), <%= array %>[2, 20]
    assert_equal __([]), <%= array %>[4, 0]
    assert_equal __([]), <%= array %>[4, 100]
    assert_equal __(nil), <%= array %>[5, 0]
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.arrays_and_ranges.name") %>
    assert_equal __(Range), (1..5).class
    assert_not_equal [1, 2, 3, 4, 5], (1..5) # __
    assert_equal __([1, 2, 3, 4, 5]), (1..5).to_a
    assert_equal __([1, 2, 3, 4]), (1...5).to_a
  end


  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.slicing_with_ranges.name") %>
    <%- array = I18n.t("tests.arrays.slicing_with_ranges.array") -%>
    <%- elements = I18n.t("tests.arrays.slicing_with_ranges.elements") -%>
    <%= array %> = <%= elements %>
    <%- peanut, butter, _and, jelly = *elements -%>

    assert_equal __([<%= peanut %>, <%= butter %>, <%= _and %>]), <%= array %>[0..2]
    assert_equal __([<%= peanut %>, <%= butter %>]), <%= array %>[0...2]
    assert_equal __([<%= _and %>, <%= jelly %>]), <%= array %>[2..-1]
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.pushing_and_popping_arrays.name") %>
    <%- array = I18n.t("tests.arrays.pushing_and_popping_arrays.array") -%>
    <%= array %> = [1, 2]

    <%- last = I18n.t("tests.arrays.pushing_and_popping_arrays.last") -%>
    <%= array %>.push(:<%= last %>)

    assert_equal __([1, 2, :<%= last %>]), <%= array %>

    <%- popped_value = I18n.t("tests.arrays.pushing_and_popping_arrays.popped_value") -%>
    <%= popped_value %> = <%= array %>.pop
    assert_equal __(:<%= last %>), <%= popped_value %>
    assert_equal __([1, 2]), <%= array %>
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.arrays.shifting_arrays.name") %>
    <%- array = I18n.t("tests.arrays.shifting_arrays.array") -%>
    <%= array %> = [1, 2]
    <%- first = I18n.t("tests.arrays.shifting_arrays.first")-%>
    <%= array %>.unshift(:<%= first %>)

    assert_equal __([:<%= first %>, 1, 2]), <%= array %>

    <%- shifted_value = I18n.t("tests.arrays.shifting_arrays.shifted_value") -%>
    <%= shifted_value %> = <%= array %>.shift
    assert_equal __(:<%= first %>), <%= shifted_value %>
    assert_equal __([1, 2]), <%= array %>
  end

end

class <%= I18n.t("class_prefix") + I18n.t("tests.objects.class") %> < Neo::Koan

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.objects.everything_is_an_object.name") %>
    assert_equal __(true), 1.is_a?(Object)
    assert_equal __(true), 1.5.is_a?(Object)
    assert_equal __(true), "<%= I18n.t('tests.objects.everything_is_an_object.string') %>".is_a?(Object)
    assert_equal __(true), nil.is_a?(Object)
    assert_equal __(true), Object.is_a?(Object)
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.objects.objects_can_be_converted_to_strings.name") %>
    assert_equal __("123"), 123.to_s
    assert_equal __(""), nil.to_s
  end


  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.objects.objects_can_be_inspected.name") %>
    assert_equal __("123"), 123.inspect
    assert_equal __("nil"), nil.inspect
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.objects.every_object_has_an_id.name") %>
    <%- object = I18n.t("tests.objects.every_object_has_an_id.object") -%>
    <%= object %> = Object.new
    assert_equal __(Fixnum), <%= object %>.object_id.class
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.objects.every_object_has_different_id.name") %>
    <%- object = I18n.t("tests.objects.every_object_has_different_id.object") -%>
    <%= object %> = Object.new
    <%- another_object = I18n.t("tests.objects.every_object_has_different_id.another_object") -%>
    <%= another_object %> = Object.new
    assert_equal __(true), <%= object %>.object_id != <%= another_object %>.object_id
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.objects.small_integers_have_fixed_ids.name") %>
    assert_equal __(1), 0.object_id
    assert_equal __(3), 1.object_id
    assert_equal __(5), 2.object_id
    assert_equal __(201), 100.object_id

    <%= I18n.t("tests.objects.small_integers_have_fixed_ids.hint") %>
  end

  def <%= I18n.t("test_prefix") %>_<%= I18n.t("tests.objects.clone_creates_a_different_object.name")%>
    <%- object = I18n.t("tests.objects.clone_creates_a_different_object.object") -%>
    <%= object %> = Object.new
    <%- copy = I18n.t("tests.objects.clone_creates_a_different_object.copy") -%>
    <%= copy %> = <%= object %>.clone

    assert_equal __(true), <%= object %> != <%= copy %>
    assert_equal __(true), <%= object %>.object_id != <%= copy %>.object_id
  end

end

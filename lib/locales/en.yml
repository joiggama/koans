---
en:
  class_prefix: About
  test_prefix: test

  neo:
    fill_me_in: Fill me in
    unknown_argument: Unknown command line argument %{argument}

    assertions:
      failed: Failed assertion
      expected_to_equal: Expected %{actual} to equal %{expected}
      expected_to_not_equal: Expected %{actual to not equal %{expected}
      expected_to_be_nil: Expected %{actual} to be nil
      expected_to_not_be_nil: Expected %{actual} to be nil
      expected_to_match: Expected %{actual} to match %{pattern}
      expected_to_raise_other: Exception %{exception} expected, but %{actual} was raised
      expected_to_raise: Exception %{exception} expected, but nothing raised
      expected_to_not_raise: Expected nothing to be raised, but exception %{exception} was raised

    sensei:
      about_losing: When you lose, don't lose the lesson
      about_mountains: Mountains are merely mountains
      about_mountains_again: Mountains are again merely mountains
      about_rules: Learn the rules so you know how to break them properly
      aboout_silence: Remember that silence is sometimes the best answer
      about_sleeping: Sleep is the best meditation
      about_things: "Things are not what they appear to be: nor are they otherwise"
      about_who: Brought to you by

      the_master_says: The master says
      the_master_supports: Do not lose hope
      the_master_instructs: Please meditate on the following code

      your_answers: The answers you seek
      your_awareness: has expanded your awareness
      your_enlightenment: You have not yet reached enlightenment
      your_frustration: I sense frustration. Do not be afraid to ask for help
      your_karma: has damaged your karma
      your_path: Your path thus far
      your_progress: You are progressing. Excellent. %{progress} completed

  tests:
    path_to_enlightenment:
      filename: path_to_enlightenment.rb

    asserts:
      class: Asserts
      filename: about_asserts.rb

      assert_truth:
        description: We shall contemplate truth by testing reality, via asserts
        name: assert_truth
        hint: This should be true -- Please fix this

      assert_with_message:
        description: Enlightenment may be more easily achieved with appropriate messages
        name: assert_with_message
        hint: This should be true -- Please fix this

      assert_equality:
        description: To understand reality, we must compare our expectations against reality
        name: assert_equality
        expected_value: expected_value
        actual_value: actual_value

      a_better_way_of_asserting_equality:
        description: Some ways of asserting equality are better than others
        name: a_better_way_of_asserting_equality
        expected_value: expected_value
        actual_value: actual_value

      fill_in_values:
        description: Sometimes we will ask you to fill in the values
        name: fill_in_values

    nil:
      class: Nil
      filename: about_nil.rb

      nil_is_an_object:
        name: nil_is_an_object
        hint: Unlike NULL in other languages

      you_dont_get_null_pointer_errors:
        name: you_dont_get_null_pointer_errors_when_calling_methods_on_nil
        hint: |-
          # What happens when you call a method that doesn't exist?. The
              # following begin/rescue/end code block captures the exception and
              # makes some assertions about it.
        hint_2: What exception has been caught?
        hint_3: |-
          # What message was attached to the exception?
                # (HINT: replace __ with part of the error message.)
        some_method_nil_doesnt_know: some_method_nil_doesnt_know_about

      nil_has_a_few_methods_defined:
        name: nil_has_a_few_methods_defined_on_it
        hint: |-
          # THINK ABOUT IT:
              #
              # Is it better to use
              #    obj.nil?
              # or
              #    obj == nil
              # ?
              # Why?

    objects:
      class: Objects
      filename: about_objects.rb

      everything_is_an_object:
        name: everything_is_an_object
        string: string
      objects_can_be_converted_to_strings:
        name: objects_can_be_converted_to_strings
      objects_can_be_inspected:
        name: objects_can_be_inspected
      every_object_has_an_id:
        name: every_object_has_an_id
        object: object
      every_object_has_different_id:
        name: every_object_has_different_id
        object: object
        another_object: another_object
      small_integers_have_fixed_ids:
        name: small_integers_have_fixed_ids
        hint: |-
          # THINK ABOUT IT:
              # What pattern do the object IDs for small integers follow?
      clone_creates_a_different_object:
        name: clone_creates_a_different_object
        object: object
        copy: copy
